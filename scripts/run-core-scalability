#!/bin/bash
#
# Copyright (c) 2018 University of Utah
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR(S) DISCLAIM ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL AUTHORS BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Export DPDK bindings to the current shell.
export LD_LIBRARY_PATH=$(pwd)/net/target/native

cd db

# Check for a TOML file with client related configuration.
if [[ ! -f client.toml ]]; then
    echo "Missing client.toml file (in db directory)."
    exit -1
fi

# Get the "use_invoke" field from the client configuration. The output file
# will be markes with the value of this field, allowing to distinguish between
# experiments run with an invoke based YCSB, and experiments run with a native
# operation based YCSB.
invoke=$(cat client.toml | grep "use_invoke" | awk '{ print $NF }')

# The number of tenants requests are being generated for. Each data point in the
# output file is marked with this number.
tenants=$(cat client.toml | grep "num_tenants" | awk '{ print $NF }')

# The skew with which tenants are chosen by the client. Each data point in the
# output file is marked with this number.
tenant_skew=$(cat client.toml | grep "tenant_skew" | awk '{ print $NF }')

# The different server cores that YCSB will generate load for.
cores=(1 2 4 8)

# The different request rates that the YCSB client will be configured and run
# with.
rates=(1000000)

# Header for the output file. Required inorder to plot the results.
echo "Offered 50 99 Tenants TSkew Cores Thrpt" > ../ycsb_invoke_"$invoke".data

# Sets the request rate vector based on the value of invoke & a passed in
# argument (number of cores).
set_rates() {
    if [ "$invoke" == "true" ]
    then
        if [ $1 -eq 1 ]
        then
            rates=(150000 175000 200000 225000 250000)
        elif [ $1 -eq 2 ]
        then
            rates=(250000 275000 300000 325000 350000)
        elif [ $1 -eq 4 ]
        then
            rates=(450000 475000 500000 525000 550000)
        elif [ $1 -eq 8 ]
        then
            rates=(875000 900000 925000 950000 975000)
        fi
    else
        if [ $1 -eq 1 ]
        then
            rates=(225000 250000 275000 300000 325000)
        elif [ $1 -eq 2 ]
        then
            rates=(350000 375000 400000 425000 450000)
        elif [ $1 -eq 4 ]
        then
            rates=(625000 650000 675000 700000 725000)
        elif [ $1 -eq 8 ]
        then
            rates=(1050000 1075000 1100000 1125000 1150000)
        fi
    fi
}

# Run YCSB stressing a different number of server cores.
for core in ${cores[@]}
do
    # Configure the client TOML file with the number of cores to stress.
    sed -i "s/server_udp_ports = [1-9][0-9]*/server_udp_ports = $core/g" client.toml

    # Set the list of request rates that YCSB should generate.
    set_rates $core

    # Run YCSB for each of the above request rates.
    for rate in ${rates[@]}
    do
        echo "rate=$rate, invoke=$invoke, tenants=$tenants, tenant_skew=$tenant_skew, cores=$core"

        # Configure the client TOML file with the request rate.
        sed -i "s/req_rate = [1-9][0-9]*/req_rate = $rate/g" client.toml

        # Run YCSB, and write out the output to a file.
        rm -f ../samples.temp
        RUST_LOG=debug ./target/release/ycsb >> ../samples.temp 2>&1

        # Calculate the total measured server throughput.
        thrpt=$(cat ../samples.temp | grep "YCSB Throughput" | \
                awk 'BEGIN { sum = 0 } { sum += $3 } END { print sum }')

        # Print final numbers to a file.
        cat ../samples.temp | grep ">>>" | \
                awk "{ print $rate, \$2, \$3, $tenants, $tenant_skew, $core, $thrpt }" >> \
                ../ycsb_invoke_"$invoke".data

        # Cleanup temp file.
        rm ../samples.temp
    done
done

exit 0
